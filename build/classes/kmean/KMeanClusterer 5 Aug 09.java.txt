/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package kmean;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

/**
 *
 * @author Knacky
 */
public class KMeanClusterer {
    private int kValue = 0;
    private double threshold = 0.0;
    private double MSE = 0.0;
    public int numDim = 0;
    private boolean changed = false;
    private DataCluster smallestCluster = null;
    DataCluster[] clusterList = new DataCluster[1];
    String[] universalColNameList = new String[1];
    public ArrayList<DataVector> dataVectorList = new ArrayList<DataVector>();
    Map<DataVector,Map<DataVector,Double>> distanceMap = new HashMap<DataVector,Map<DataVector,Double>>();
    double[][] simMatrix = new double[1][1];
    
    public KMeanClusterer(int k){
        kValue = k;
        clusterList = new DataCluster[k];
        for (int i = 0; i < k; i++){
            clusterList[i] = new DataCluster();
        }
        
    }
    
    public KMeanClusterer(int k, double threshold){
        this(k);
        this.threshold = threshold;
        
    }
    
    public DataCluster[] getClusterList(){
        return clusterList;
    }
    
                
    private double findMaxSimFromSet(DataVector vec,Set<DataVector> TSet){
        double max= -1, sim;
//        if (!distanceMap.containsKey(vec))
//            distanceMap.put(vec, new HashMap<DataVector, Double>());
        for (DataVector considered : TSet){
            if (considered == vec)
                continue;
            int indexVec = dataVectorList.indexOf(vec);
            int indexConsidered = dataVectorList.indexOf(considered);
            if (indexVec < indexConsidered)
            {
                sim = simMatrix[indexVec][indexConsidered];
            } else {
                sim = simMatrix[indexConsidered][indexVec];
            }
//            
//            if (distanceMap.get(vec).containsKey(considered))
//                dist = distanceMap.get(vec).get(considered);
//            else {
//                dist = distance(vec, considered);
//                distanceMap.get(vec).put(considered, dist);
////                System.out.println("First cal.");
//            }
//            System.out.println("Similarity from "+vec+" to "+considered+" is "+sim);
            if (sim > max)
                max = sim;
        }
        return max;
    }
    // use similarity
    public void selectByLeastSimilar(){
        Set<DataVector> TSet = new HashSet<DataVector>();
        Set<DataVector> theRest = new HashSet<DataVector>();
        
        DataVector properVec = null; 
        double minofmax = Double.MAX_VALUE-1, maxsim = -1;
        theRest.addAll(dataVectorList);
        //For now, use the first data as initial seed
        DataVector firstToAdd = null;
        int j = 0;
        while (dataVectorList.get(j).valueMap.size() == 0)
            j++;
        TSet.add(dataVectorList.get(j)); theRest.remove(dataVectorList.get(j));
        clusterList[0].representative = dataVectorList.get(j);
        clusterList[0].add(dataVectorList.get(j));
//        System.out.println("TSet: "+TSet);
//        System.out.println("theRest: "+theRest);
        
        for (int i = 1; i < kValue; i++){
//            System.out.println("Cluster "+i);
            minofmax = Double.MAX_VALUE; properVec = null;
            
            for (DataVector vec : theRest){
                if (vec.valueMap.size() == 0)
                    continue;
                maxsim = findMaxSimFromSet(vec,TSet);
                if (minofmax > maxsim){
                    minofmax = maxsim;
                    properVec = vec;
                }
                
            }
            
//            System.out.println("ProperVec: "+properVec);
            TSet.add(properVec); theRest.remove(properVec);
            clusterList[i].representative = dataVectorList.get(i);
            clusterList[i].add(dataVectorList.get(i));
//            System.out.println("TSet: "+TSet);
//            System.out.println("theRest: "+theRest);
        }
        
    }
    /*unused now */
    private double findMinDistFromSet(DataVector vec,Set<DataVector> TSet){
        double min = Double.MAX_VALUE, dist;
        if (!distanceMap.containsKey(vec))
            distanceMap.put(vec, new HashMap<DataVector, Double>());
        for (DataVector considered : TSet){
            if (considered == vec)
                continue;
            if (distanceMap.get(vec).containsKey(considered))
                dist = distanceMap.get(vec).get(considered);
            else {
                dist = distance(vec, considered);
                distanceMap.get(vec).put(considered, dist);
//                System.out.println("First cal.");
            }
//            System.out.println("Distance from "+vec+" to "+considered+" is "+dist);
            if (dist < min)
                min = dist;
        }
        return min;
    }
    /* unused now */
    // use Euclidean distance
    public void selectByFarthest(){
        Set<DataVector> TSet = new HashSet<DataVector>();
        Set<DataVector> theRest = new HashSet<DataVector>();
        
        DataVector properVec = null; 
        double maxofmin = -1, mindist = Double.MAX_VALUE;
        theRest.addAll(dataVectorList);
        TSet.add(dataVectorList.get(0)); theRest.remove(dataVectorList.get(0));
        clusterList[0].representative = dataVectorList.get(0);
        clusterList[0].add(dataVectorList.get(0));
//        System.out.println("TSet: "+TSet);
//        System.out.println("theRest: "+theRest);
        for (int i = 1; i < kValue; i++){
//            System.out.println("Cluster "+i);
            maxofmin = -1; properVec = null;
            for (DataVector vec : theRest){
                mindist = findMinDistFromSet(vec,TSet);
                if (maxofmin < mindist){
                    maxofmin = mindist;
                    properVec = vec;
                }
            }
//            System.out.println("ProperVec: "+properVec);
            TSet.add(properVec); theRest.remove(properVec);
            clusterList[i].representative = dataVectorList.get(i);
            clusterList[i].add(dataVectorList.get(i));
//            System.out.println("TSet: "+TSet);
//            System.out.println("theRest: "+theRest);
        }
        
        
    }
    
    public static double similarity(DataVector point1, DataVector point2){
//        for (Object key : tmpKeySet){
//            res += Math.pow(longOne.valueMap.get(key), 2);
//        }
        double res = 0.0;
        DataVector shortOne = null, longOne = null;
        if ((point1.valueMap.size() == 0) || (point2.valueMap.size() == 0))
            return -1;
        if (point1.valueMap.keySet().size() > point2.valueMap.keySet().size()) {
            shortOne = point2;
            longOne = point1;
        } else {
            shortOne = point1;
            longOne = point2;
        }
        
        double normShort = 0.0, normLong = 0.0;

        Set keySet = new HashSet(longOne.valueMap.keySet());
        for (Object key : shortOne.valueMap.keySet()) {
            normShort += shortOne.valueMap.get(key) * shortOne.valueMap.get(key);
            if (longOne.valueMap.containsKey(key)) {
                normLong += longOne.valueMap.get(key) * longOne.valueMap.get(key);
                keySet.remove(key);
                res += shortOne.valueMap.get(key) * longOne.valueMap.get(key);
//                        System.out.print("short one: "+shortOne.valueMap.get(key));
//                        System.out.println(" long one: "+longOne.valueMap.get(key));

            }
        }
        for (Object key : keySet) {
            normLong += longOne.valueMap.get(key) * longOne.valueMap.get(key);
        }
        normShort = Math.sqrt(normShort);
        normLong = Math.sqrt(normLong);
        res /= (normLong * normShort);
        return res;
        
    }   
    public double similarPointToCluster(DataVector point1, DataCluster cluster){
        double res = 0.0;
        int indpoint1 = dataVectorList.indexOf(point1);
        int excludedNo = 0;
        for (DataVector member : cluster.members){
            int indmember = dataVectorList.indexOf(member);
            if (indpoint1 < indmember){
                if (!Double.isNaN(simMatrix[indpoint1][indmember]))
                    res += simMatrix[indpoint1][indmember];
                else
                    excludedNo++;
            }
            else {
                if (!Double.isNaN(simMatrix[indmember][indpoint1]))
                    res += simMatrix[indmember][indpoint1];
                else
                    excludedNo++;
            }
        }
        if ((cluster.members.size()-excludedNo) == 0)
            res = -1;
        else
            res /= (cluster.members.size()-excludedNo);

//        for (Object key : tmpKeySet){
//            res += Math.pow(longOne.valueMap.get(key), 2);
//        }
        
//        for (int i = 0; i < point1.dimValueList.length; i++){
//            int index = point2.getIndexOfName(point1.dimNameList[i]);
//            if (index != -1){
//                res += Math.pow(point1.dimValueList[i]-point2.dimValueList[index],2);
//            } else {
//                res += Math.pow(point1.dimValueList[i],2);
//            }
//            
//        }
//        for (int i = 0; i < point2.dimValueList.length; i++){
//            int index = point1.getIndexOfName(point2.dimNameList[i]);
//            if (index == -1){
//                res += Math.pow(point2.dimValueList[i],2);
//            }
            
//        }
//        res = Math.sqrt(res);
        return res;
    }
    /*unused now*/
    public double distance(DataVector point1, DataVector point2) {
        //Euclidean distance
//        double res = 0.0;
//        
//        for (int i = 0; i < point1.dimValueList.length; i++){
//            res += Math.pow(point1.dimValueList[i]-point2.dimValueList[i],2);
//        }
//        res = Math.sqrt(res);
//        return res;
        double res = 0.0;
        DataVector shortOne = null, longOne = null;
        if (point1.valueMap.keySet().size() > point2.valueMap.keySet().size()) {
            shortOne = point2;
            longOne = point1;
        } else {
            shortOne = point1;
            longOne = point2;
        }
//        Set tmpKeySet = longOne.valueMap.keySet();
        for (Object key : longOne.valueMap.keySet()){
            if (shortOne.valueMap.containsKey(key)){
                res += Math.pow(shortOne.valueMap.get(key)-longOne.valueMap.get(key), 2);
//                tmpKeySet.remove(key);
            } else
            {
                res += Math.pow(longOne.valueMap.get(key), 2);
                
            }
        }
//        for (Object key : tmpKeySet){
//            res += Math.pow(longOne.valueMap.get(key), 2);
//        }
        
//        for (int i = 0; i < point1.dimValueList.length; i++){
//            int index = point2.getIndexOfName(point1.dimNameList[i]);
//            if (index != -1){
//                res += Math.pow(point1.dimValueList[i]-point2.dimValueList[index],2);
//            } else {
//                res += Math.pow(point1.dimValueList[i],2);
//            }
//            
//        }
//        for (int i = 0; i < point2.dimValueList.length; i++){
//            int index = point1.getIndexOfName(point2.dimNameList[i]);
//            if (index == -1){
//                res += Math.pow(point2.dimValueList[i],2);
//            }
            
//        }
        res = Math.sqrt(res);
        return res;
        
        
//        throw new UnsupportedOperationException("Not yet implemented");
    }
    /* convergence is now not determined by MSE */
    public double calcMSE(){
        double resultList[] = new double[numDim];
        double MSE = 0.0;
        for (int i = 0; i < clusterList.length; i++){
            
//            System.out.println("cluster "+i);
            for (DataVector member : clusterList[i].members){
                double tempRes = 0.0;
//                resultList = new double[clusterList[i].representative.dimNameList.length];
                if (member.valueMap.size() == 0 || clusterList[i].representative.valueMap.size() == 0)
                    continue;
                DataVector shortOne = null, longOne = null;
                if (clusterList[i].representative.valueMap.keySet().size() > member.valueMap.keySet().size()) {
                    shortOne = member;
                    longOne = clusterList[i].representative;
                } else {
                    shortOne = clusterList[i].representative;
                    longOne = member;
                }
                resultList = new double[longOne.valueMap.keySet().size()];
//                Set tmpKeySet = longOne.valueMap.keySet();
                int j = 0;
                for (Object key : longOne.valueMap.keySet()) {
                    if (shortOne.valueMap.containsKey(key)) {
//                        System.out.println("Member dimvaluelist index: "+shortOne.valueMap.get(key));
//                        System.out.println("cluster i representative: "+longOne.valueMap.get(key));
                        resultList[j] += shortOne.valueMap.get(key)-longOne.valueMap.get(key);
//                        tmpKeySet.remove(key);
                    } else {
                        resultList[j] += longOne.valueMap.get(key);
                    }
                    j++;
                }
                for (j = 0; j < resultList.length; j++){
//                    System.out.println("j: "+j+" resultList j "+resultList[j]);
                    tempRes += resultList[j]*resultList[j];
//                    System.out.println("Temp Res: "+tempRes);
                }
                MSE += tempRes;
                
//                for (int j = 0; j < clusterList[i].representative.dimValueList.length; j++) {
////                    System.out.println("j: "+j);
//                    int index = member.getIndexOfName(clusterList[i].representative.dimNameList[j]);
//                    if (index != -1) {

//                        resultList[j] += member.dimValueList[index]-clusterList[i].representative.dimValueList[j];
////                        resultList[j] += Math.pow(point1.dimValueList[i] - point2.dimValueList[index], 2);
//                    } else {
////                        System.out.println("cluster i representative: "+clusterList[i].representative.dimValueList[j]);
//                        resultList[j] += clusterList[i].representative.dimValueList[j];
////                        res += Math.pow(point1.dimValueList[i], 2);
//                    }
//                }
//                for (int j = 0; j < clusterList[i].representative.dimValueList.length; j++) {
////                    System.out.println("j: "+j+" resultList j "+resultList[j]);
//                    tempRes += resultList[j]*resultList[j];
////                    System.out.println("Temp Res: "+tempRes);
//                }
//                MSE += tempRes;
            }
                
//        
//                for (int j = 0; j < member.dimValueList.length; j++) {
//                    resultList[j] += member.dimValueList[j]-clusterList[i].representative.dimValueList[j];
//                }
//                for (int j = 0; j < member.dimValueList.length; j++) {
//                    tempRes += resultList[j]*resultList[j];
//                }
//                MSE += tempRes;
//            }
            
        }
        MSE /= dataVectorList.size();
        return MSE;
    }
    public void recalRepresentVector(){
        ArrayList<String> nameArrList = new ArrayList<String>(numDim);
//        double[] zigmaList = new double[numDim]; 
        ArrayList<Double> zigmaList = new ArrayList<Double>(numDim);
        for (int i = 0; i < clusterList.length; i++){
//            System.out.println("cluster "+i);
//            zigmaList = new double[numDim];
//            nameArrList = new ArrayList<String>(numDim);
//            zigmaList = new ArrayList<Double>(numDim);
            Map<String,Double> valMap = new TreeMap<String,Double>();
            
            for (DataVector member : clusterList[i].members){
//                System.out.println("member: "+member);
//                for (int j = 0; j < member.dimValueList.length; j++) {
                if (member.valueMap.size() == 0)
                    continue;
                for (String key : member.valueMap.keySet()) {
//                    int index = nameArrList.indexOf(member.dimNameList[j]);
//                    int index = nameArrList.indexOf(key);
//                    if (index == -1){
                    if (!valMap.containsKey(key)){
//                        nameArrList.add(member.dimNameList[j]);
//                        zigmaList.add((double)member.dimValueList[j]/clusterList[i].members.size());
                        valMap.put(key, (double)member.valueMap.get(key)/clusterList[i].members.size());
                    } else {
                        valMap.put(key, valMap.get(key)+(double)member.valueMap.get(key)/clusterList[i].members.size());
//                        zigmaList.set(index,zigmaList.get(index)+(double)member.dimValueList[j]/clusterList[i].members.size());
                    }
//                    zigmaList[j] += (double)member.dimValueList[j]/clusterList[i].members.size();
                }
                
            }
            clusterList[i].representative = new MeanVector(valMap);
//            clusterList[i].representative = new MeanVector(zigmaList.toArray(new Double[1]));
//            clusterList[i].representative.setNameList(nameArrList.toArray(new String[1]));
//            System.out.println("new rep: "+clusterList[i].representative);
//            System.out.println("");
        }
    }

    public void iterateOneStep() {
        changed = false;
        for (DataVector datum : dataVectorList) {
//            System.out.println("data: "+datum);
            double diff = 0.0, maxsim = -1;
            /* deal with data with no GO terms */
            if (datum.valueMap.size() == 0) {
//                System.out.println("datum with valuemap size 0 ");

                if (datum.belongToCluster == null){
//                    if (smallestCluster == null){
                        int smallestMembers = Integer.MAX_VALUE - 2;
                        for (DataCluster cluster : clusterList) {
                            if (cluster.members.size() < smallestMembers) {
                                smallestMembers = cluster.members.size();
                                smallestCluster = cluster;
                            }
                        }
//                    }
                    changed = true;
                    smallestCluster.add(datum);
                } else {
                    int smallestMembers = Integer.MAX_VALUE - 2;
                    for (DataCluster cluster : clusterList) {
                        int clusterMemberSize = cluster.members.size();
//                        System.out.println("clusterMemberSize "+clusterMemberSize);
                        if (cluster == datum.belongToCluster) {
                            clusterMemberSize--;
//                            System.out.println("clusterMemberSize reduced "+clusterMemberSize);
                        }
                        if (clusterMemberSize < smallestMembers) {
                            smallestMembers = clusterMemberSize;
                            smallestCluster = cluster;
                        }
                    }
                    if (smallestCluster != datum.belongToCluster){
                        changed = true;
                        DataCluster dc = datum.belongToCluster;
                        if (dc.members.size() == 1) {
                            System.out.println("From data with no GO terms");
                            System.out.println("found zero members");
                            System.out.println("smallest cluster sim: " + similarPointToCluster(datum,smallestCluster));
                            System.out.println("self sim: " + similarPointToCluster(datum, datum.belongToCluster));
                        }
                        datum.belongToCluster.remove(datum);
                        smallestCluster.add(datum);
                    }
                }
                
            } else {
                DataCluster maxCluster = null;
//                if ((datum.belongToCluster != null) && (similarPointToCluster(datum, datum.belongToCluster) > 0.999999999999D)); else {
                if ((datum.belongToCluster != null) && (datum.belongToCluster.members.size() == 1)); else {
                    for (DataCluster cluster : clusterList) {
//                diff = distance(datum,cluster.representative);

                        diff = similarPointToCluster(datum, cluster);
//                    if (Double.isNaN(diff))
//                        continue;
//                System.out.println("cluster rep: "+cluster.representative+" with diff "+diff);

//                    if ((diff - maxsim) > 0) {
                        int result = Double.compare(diff, maxsim);
//                    System.out.println("diff "+diff);
//                    if (diff > maxsim){
                        if (result > 0) {
                            maxsim = diff;
                            maxCluster = cluster;
                            if (maxsim > 0.98) {
                                System.out.println("found similar > 0.98 cluster " + maxsim);

                                if (datum.belongToCluster == null) {
                                    System.out.println("because datum has no cluster");
                                } else if (cluster != datum.belongToCluster) {
                                    System.out.println("but not own cluster");
                                    System.out.println("self sim " + similarPointToCluster(datum, datum.belongToCluster));
                                }
                            }

                        }
                    }
                }
                if (maxCluster != null) {
                    if (datum.belongToCluster == null) {
//                        if (maxCluster != null) {
                            changed = true;
                            maxCluster.add(datum);
//                        }
                    } else //            if ((maxCluster != datum.belongToCluster) &&
                    //                    ((datum.belongToCluster != null) && (datum.belongToCluster.members.size() > 1))){
                    //                if ((datum.belongToCluster.members.size() > 1) &&
                    //                        (maxCluster != datum.belongToCluster)) {
                    if (maxCluster != datum.belongToCluster) {
                        changed = true;
//                if (datum.belongToCluster != null) {

                        DataCluster dc = datum.belongToCluster;
                        if (dc.members.size() == 1) {
                            System.out.println("found zero members");
                            System.out.println("max sim: " + maxsim);
                            System.out.println("self sim: " + similarPointToCluster(datum, datum.belongToCluster));
                        }
                        datum.belongToCluster.remove(datum);
////                    if (smallestCluster != null) {
//                        if (datum.belongToCluster.members.size() < smallestCluster.members.size()) {
//                            smallestCluster = datum.belongToCluster;
//                        }
//                    } else {
//                        smallestCluster = datum.belongToCluster;
//                    }

//                }
                        maxCluster.add(datum);
                    }
                }
            }
//            System.out.println("min cluster: "+minCluster+" with "+mindiff);
        }
//        for (DataVector datum : dataVectorList){
////            System.out.println("data: "+datum);
//            double diff = 0.0, mindiff = Double.MAX_VALUE;
//            DataCluster minCluster = null;
//            for (DataCluster cluster : clusterList){
//                diff = distance(datum,cluster.representative);
////                System.out.println("cluster rep: "+cluster.representative+" with diff "+diff);
//                
//                if (diff < mindiff){
//                    mindiff = diff;
//                    minCluster = cluster;
//                }
//            }
//            if (datum.belongToCluster != null)
//                datum.belongToCluster.remove(datum);
//            minCluster.add(datum);
////            System.out.println("min cluster: "+minCluster+" with "+mindiff);
//        }
    }
    
    public void cluster(){
//        double currentMSE;
        // while until no change of representative;
        int iteration = 0;
        do{
//            currentMSE = MSE;
            iterateOneStep();
            recalRepresentVector();
            MSE = calcMSE();
            System.out.println("Current MSE: "+MSE);
            iteration++;
//        } while (MSE-currentMSE > threshold);
        } while(changed && iteration < 10);
        
    }
    
    public void calcSim(){
//        StopWatch sw = new StopWatch();
        System.out.println("datavectorlist size "+dataVectorList.size());
        simMatrix = new double[dataVectorList.size()][dataVectorList.size()];
        for (int i = 0; i < simMatrix.length; i++){
//            System.out.println("Cluster "+i+": "+dataVectorList.get(i));
//            sw.start();
            for (int j = i; j < simMatrix.length; j++) {
//                System.out.println("Cluster "+j+": "+dataVectorList.get(j));
                /* if vector(s) have/has no GO terms, the distance between them is set to -1
                 * (or not similar at all)
                 */
                if (dataVectorList.get(i).valueMap.size() == 0 || dataVectorList.get(j).valueMap.size() == 0){
                    simMatrix[i][j] = -1;
                    continue;
                }
                double res = 0.0;
                DataVector shortOne = null, longOne = null;
                if (dataVectorList.get(i).valueMap.keySet().size() > dataVectorList.get(j).valueMap.keySet().size()){
                    shortOne = dataVectorList.get(j);
                    longOne = dataVectorList.get(i);
                }
                else {
                    shortOne = dataVectorList.get(i);
                    longOne = dataVectorList.get(j);
                }
                double normShort = 0.0, normLong = 0.0;
//                Set keySet = new HashSet(longOne.valueMap.keySet());
                for (Object key : shortOne.valueMap.keySet()){
                    double valueShort = shortOne.valueMap.get(key);
                    normShort += valueShort*valueShort;
                    Object valLong = longOne.valueMap.get(key);
                    if (valLong != null){
                        double valueLong = (Double)valLong;
//                        normLong += valueLong*valueLong;
//                        keySet.remove(key);
                        res += valueShort*valueLong;
//                        System.out.print("short one: "+shortOne.valueMap.get(key));
//                        System.out.println(" long one: "+longOne.valueMap.get(key));
                        
                    }
                }
//                for (Object key : keySet){
                for (Object key : longOne.valueMap.keySet()){
                    double valueLong = longOne.valueMap.get(key);
                    normLong += valueLong*valueLong;
                }
                normShort = Math.sqrt(normShort);
                normLong = Math.sqrt(normLong);
                res /= (normLong*normShort);
                simMatrix[i][j] = res;
//                System.out.println("Result: "+res);
        
                
            }
//            sw.stop();
//            System.out.println("time used for loop j "+sw);
        }
    }
    
    public void assignKPoint(){
        
        calcSim();
        
        if (kValue >  dataVectorList.size())
        {
            System.out.println("error kValue > data vector list");
            return;
        }
//        selectByFarthest();
        selectByLeastSimilar();
//        for (int i = 0; i < kValue; i++){
//            clusterList[i].representative = dataVectorList.get(i);
//            clusterList[i].add(dataVectorList.get(i));
//        }
    }
    
    /* May not be used anymore */
    public void populateNameList(String list[]){
//        DataVector.populateNameList(list);
        universalColNameList = new String[list.length];
        
        for (int i = 0; i < list.length; i++){
            universalColNameList[i] = list[i];
        }
    }

    public void printNameList(){
        String s = "(";
        
        for (String name : universalColNameList)
        {
            s+=name+", ";
        }
        s+=")";
        System.out.println("Universal Name list: "+s);
    }
    
    private static Map putStringDoubleMap(String[] s, double[] d){
        Map<String,Double> m = new TreeMap<String, Double>();
        for (int i = 0; i < d.length; i++) {
            m.put(s[i], d[i]);
        }
        return m;
    }

    /**
     * used to test this class.
     * @param args
     */
    public static void main(String[] args) {
        KMeanClusterer kClusterer = new KMeanClusterer(3);
        Map<String,Double> map = new TreeMap<String,Double>();
        String[] namelist = {"a","b","c"};
        kClusterer.numDim = 3;
        kClusterer.populateNameList(namelist);
//        DataVector.populateNameList(namelist);
        map = putStringDoubleMap(namelist,new double[]{0, 1, 0});
        kClusterer.dataVectorList.add(new DataVector(map));
        map = putStringDoubleMap(namelist,new double[]{1, 0, 0});
        kClusterer.dataVectorList.add(new DataVector(map));
        map = putStringDoubleMap(namelist,new double[]{0, 0, 0});
        kClusterer.dataVectorList.add(new DataVector(map));
        map = putStringDoubleMap(namelist,new double[]{1, 1, 0});
        kClusterer.dataVectorList.add(new DataVector(map));
        map = putStringDoubleMap(namelist,new double[]{0, -1, 0});
        kClusterer.dataVectorList.add(new DataVector(map));
        map = putStringDoubleMap(namelist,new double[]{0, 0, 1});
        kClusterer.dataVectorList.add(new DataVector(map));
        map = putStringDoubleMap(namelist,new double[]{1, 0, 1});
        kClusterer.dataVectorList.add(new DataVector(map));
        map = putStringDoubleMap(namelist,new double[]{1, 1, -1});
        kClusterer.dataVectorList.add(new DataVector(map));
//        kClusterer.dataVectorList.add(new DataVector(new double[]{0, 1, 0}));
//        kClusterer.dataVectorList.add(new DataVector(new double[]{1, 0, 0}));
//        kClusterer.dataVectorList.add(new DataVector(new double[]{0, 0, 0}));
//        kClusterer.dataVectorList.add(new DataVector(new double[]{1, 1, 0}));
//        kClusterer.dataVectorList.add(new DataVector(new double[]{0, -1, 0}));
//        kClusterer.dataVectorList.add(new DataVector(new double[]{0, 0, 1}));
//        kClusterer.dataVectorList.add(new DataVector(new double[]{1, 0, 1}));
//        kClusterer.dataVectorList.add(new DataVector(new double[]{1, 1, -1}));
//        for (DataVector vec : kClusterer.dataVectorList){
//            vec.setNameList(namelist);
//        }
        
        namelist = new String[] {"b", "a"};
        map = putStringDoubleMap(namelist,new double[]{2, 0});
        DataVector vec = new DataVector(map);
//        vec = new DataVector(new double[]{2, 0});
//        vec.setNameList(namelist);
        kClusterer.dataVectorList.add(vec);
        
        map = putStringDoubleMap(namelist,new double[]{-1, 2});
        vec = new DataVector(map);
//        vec = new DataVector(new double[]{-1, 2});
//        vec.setNameList(namelist);
        kClusterer.dataVectorList.add(vec);
//        kClusterer.dataVectorList.add(new DataVector(new double[]{1, 0, 1}));
        System.out.println(kClusterer.dataVectorList.size());
        kClusterer.assignKPoint();
        kClusterer.cluster();
    }
}


