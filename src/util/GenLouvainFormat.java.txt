/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package util;

import edu.uci.ics.jung.algorithms.transformation.DirectionTransformer;
import edu.uci.ics.jung.graph.Edge;
import edu.uci.ics.jung.graph.Graph;
import edu.uci.ics.jung.graph.Vertex;
import edu.uci.ics.jung.graph.decorators.UserDatumNumberEdgeValue;
import edu.uci.ics.jung.graph.impl.UndirectedSparseEdge;
import edu.uci.ics.jung.graph.impl.UndirectedSparseVertex;
import edu.uci.ics.jung.io.PajekNetReader;
import edu.uci.ics.jung.random.generators.BarabasiAlbertGenerator;
import edu.uci.ics.jung.random.generators.KleinbergSmallWorldGenerator;
import edu.uci.ics.jung.utils.UserData;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Comparator;
import java.util.Iterator;
import java.util.SortedSet;
import java.util.TreeSet;

/**
 *
 * @author Knacky
 */
public class GenLouvainFormat {

//    private static String filename = "src/CurHighintdata";//.txt";
//    private static String filename = "src/ItoT_intdata";//.txt";
    private static String filename = "src/arxiv";//.txt";

    public static void main(String[] args) throws FileNotFoundException, IOException {
//        int numnode = 305;//1462
//        int numedge = 6942;
//        int numnode = 928;//2708
//            int numedge = 7120;
//            int numnode = 2928;//2708
//            int numedge = 10000;
        int numnode = 6;
        int numedge = 350000;
//            int numedgeperstep = 6;
//        int numedgeperstep = 4;
//            int numedgeperstep = 4;
            int numedgeperstep = 5;
            Graph graph;
//        BarabasiAlbertGenerator ba = new BarabasiAlbertGenerator(numnode, numedgeperstep);
        KleinbergSmallWorldGenerator kg = new KleinbergSmallWorldGenerator(3, 2.5);
//            graph.getEdgeConstraints().add(Graph.UNDIRECTED_EDGE);
//            graph = DirectionTransformer.toUndirected((Graph)kg.generateGraph());
        
//        graph = (Graph) ba.generateGraph();
//        ba.evolveGraph((int) numedge / numedgeperstep);
        PajekNetReader pnr = new PajekNetReader();
        InputStream is = null;
        try {
//            File f = new File("src/all_yeast_intdata.net");
            File f = new File(filename+".net");
            is = new FileInputStream(f);
        } catch (Exception e) {
        }
        if (is == null) {
            System.out.println("Oh no");
//                InputStream is = this.getClass().getClassLoader().getResourceAsStream("zachary.net");
        }
        BufferedReader br = new BufferedReader(new InputStreamReader(is));
        graph = pnr.load(br,new UserDatumNumberEdgeValue("jung.io.PajekNetFile.EdgeWeight",UserData.SHARED));
//        Iterator i = graph.getVertices().iterator();
//        System.out.println(i.next());


        SortedSet<Edge> edgeSet = new TreeSet<Edge>(new Comparator<Edge>() {

            public int compare(Edge e1, Edge e2) {
                int e1v1 = Integer.parseInt(((Vertex) e1.getEndpoints().getFirst()).toString().substring(1));
                int e1v2 = Integer.parseInt(((Vertex) e1.getEndpoints().getSecond()).toString().substring(1));
                int e2v1 = Integer.parseInt(((Vertex) e2.getEndpoints().getFirst()).toString().substring(1));
                int e2v2 = Integer.parseInt(((Vertex) e2.getEndpoints().getSecond()).toString().substring(1));
//                System.out.println(e1v1 + " " + e1v2);
//                System.out.println(e2v1 + " " + e2v2);

                int temp;
                if (e1v1 > e1v2) {
                    temp = e1v1;
                    e1v1 = e1v2;
                    e1v2 = temp;
                }
                if (e2v1 > e2v2) {
                    temp = e2v1;
                    e2v1 = e2v2;
                    e2v2 = temp;
                }
                if (e1v1 < e2v1) {
//                    System.out.println(e1v1 + " " + e1v2 + "<" + e2v1 + " " + e2v2);
                    return -1;
                } else if (e1v1 > e2v1) {
//                    System.out.println(e1v1 + " " + e1v2 + ">" + e2v1 + " " + e2v2);
                    return 1;
                } else if (e1v1 == e2v1) {
                    if (e1v2 < e2v2) {
//                        System.out.println(e1v1 + " " + e1v2 + "<" + e2v1 + " " + e2v2);
                        return -1;
                    } else if (e1v2 > e2v2) {
//                        System.out.println(e1v1 + " " + e1v2 + ">" + e2v1 + " " + e2v2);
                        return 1;
                    } else {
//                        System.out.println(e1v1 + " " + e1v2 + "=" + e2v1 + " " + e2v2);
                        return 0;
                    }
                }
//                e1v1.toString()
                return 0;
            }
        });
        edgeSet.addAll(graph.getEdges());
        printInLovain(edgeSet);
//        System.out.println(edgeSet.size());
//        System.out.println(graph.getEdges());
    }

    public static void printInLovain(SortedSet<Edge> edgeSet) throws FileNotFoundException {
        PrintWriter pw = new PrintWriter(filename+".txt");
        double sum = 0;
        for (Edge edge : edgeSet) {
            int v1 = Integer.parseInt(((Vertex) edge.getEndpoints().getFirst()).toString().substring(1));
            int v2 = Integer.parseInt(((Vertex) edge.getEndpoints().getSecond()).toString().substring(1));
            int temp;
            if (v1 > v2) {
                temp = v1;
                v1 = v2;
                v2 = temp;
            }
//            v1--; v2--;
            if (edge.getUserDatum("jung.io.PajekNetFile.EdgeWeight") != null){
                pw.println(v1 + " " + v2+" "+Math.round((Float)edge.getUserDatum("jung.io.PajekNetFile.EdgeWeight")));
                sum += (Float)edge.getUserDatum("jung.io.PajekNetFile.EdgeWeight");
            } else{
                pw.println(v1 + " " + v2+" 1");
                sum += 1;
            }
        }
        System.out.println(sum);
        pw.close();
    }
}
