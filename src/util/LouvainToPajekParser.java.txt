/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package util;

import edu.uci.ics.jung.graph.decorators.StringLabeller;
import edu.uci.ics.jung.graph.impl.UndirectedSparseGraph;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.StringTokenizer;

/**
 *
 * @author Knacky
 */
public class LouvainToPajekParser {
    public static void main(String[] args) throws FileNotFoundException, IOException {
        
        File f = new File("src/kl265.txt");
         PrintWriter pw = new PrintWriter("src/kl265.net");
//        UndirectedSparseGraph graph = new UndirectedSparseGraph();
//        StringLabeller sl = StringLabeller.getLabeller(graph, "feature name");
        
        FileInputStream fis = new FileInputStream(f);
        BufferedReader br = new BufferedReader(new InputStreamReader(fis));
        String st = null;
        StringTokenizer stz;
//        ArrayList<Integer> vertices = new ArrayList<Integer>();
        int max = -1;
        String edges = "";
        int j = 0;
        
        while ((st = br.readLine()) != null){
            
            stz = new StringTokenizer(st);
            int node = Integer.parseInt(stz.nextToken())+1;
//            edges += (node)+" ";
            if (node > max)
                max = node;
            node = Integer.parseInt(stz.nextToken())+1;
//            edges += (node)+" 1\n";
            if (node > max)
                max = node;
            if (j%500 == 0)
//                System.out.println(st);
            j++;
        }
//        br.close();
       
        pw.println("*Vertices\t"+max);
        for (int i = 1; i <= max; i++){
            pw.println(i);
        }
        pw.println("*arcs");
//        br.reset();
        fis = new FileInputStream(f);
         
        br = new BufferedReader(new InputStreamReader(fis));
        while ((st = br.readLine())!=null){
            stz = new StringTokenizer(st);
            int node = Integer.parseInt(stz.nextToken())+1;
            pw.print(node+" ");
            
            node = Integer.parseInt(stz.nextToken())+1;
            pw.println(node+" 1");
            
            
        }
        br.close();
        pw.close();
    }
}
