/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CreateGraphFromNodeSetDialog.java
 *
 * Created on Jul 3, 2009, 4:14:35 PM
 */
package main;

import edu.uci.ics.jung.graph.Graph;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Set;
import java.util.TreeSet;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;

/**
 *
 * @author Knacky
 */
public class CreateGraphFromNodeSetDialog extends javax.swing.JDialog {

    /** Creates new form CreateGraphFromNodeSetDialog */
    public CreateGraphFromNodeSetDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);

    }

    public CreateGraphFromNodeSetDialog(java.awt.Frame parent, boolean modal, Graph dynamicGraph, Graph realGraph) {
        this(parent, modal);
        this.dynamicGraph = dynamicGraph;
        this.realGraph = realGraph;
        loadGraphData();
    }

    public Graph getDynamicGraph() {
        return dynamicGraph;
    }

    public void setDynamicGraph(Graph dynamicGraph) {
        this.dynamicGraph = dynamicGraph;
    }

    public Graph getRealGraph() {
        return realGraph;
    }

    public void setRealGraph(Graph realGraph) {
        this.realGraph = realGraph;
    }

    //compare by using standard name
    private class BioObjectComparator implements Comparator<BioObject>
    {
        public int compare(BioObject o1, BioObject o2) {
            return o1.toString().compareToIgnoreCase(o2.toString());
        }

    }
    public void loadGraphData() {
        allNodesInViewLM = new DefaultListModel();
        
        allPrimEntSet.addAll(realGraph.getVertices());
        for (Object ver : dynamicGraph.getVertices()){
            if (ver instanceof Set)
            {
                primEntInViewSet.addAll((Set)ver);
            }
            else if (ver instanceof BioObject){
                primEntSetToBeRemoved.add(ver);
            }
//            else
//                primEntInViewSet.add(ver);
            allNodesInViewSet.add(ver);
        }

        allNodesInViewLM.addElement("<html><b>All nodes in the current view: "+allNodesInViewSet.size()+" nodes</b></html>");
        for (Object ver : allNodesInViewSet){
            allNodesInViewLM.addElement(ver);
        }
        allNodesInViewJList.setModel(allNodesInViewLM);

        allPrimEntInViewLM = new DefaultListModel();

        allPrimEntInViewLM.addElement("<html><b>Primitive entities in metanodes of above list: "+primEntInViewSet.size()+" entities</b></html>");
        for (Object ver : primEntInViewSet){
            allPrimEntInViewLM.addElement(ver);
        }
        allPrimInViewJList.setModel(allPrimEntInViewLM);

        primEntInViewSetCopy.addAll(primEntInViewSet);
        allPrimEntSet.removeAll(primEntInViewSet);
        allPrimEntSet.removeAll(primEntSetToBeRemoved);
        allPrimEntLM = new DefaultListModel();
        allPrimEntLM.removeAllElements();
        allPrimEntLM.addElement("<html><b>All other primitive entities: "+allPrimEntSet.size()+" entities</b></html>");

        for (Object ver : allPrimEntSet) {
            allPrimEntLM.addElement(ver);
        }
        allOtherPrimJList.setModel(allPrimEntLM);
        selectedNodesJList.setModel(selectedNodesLM);
        selectedNodesLM.addElement("<html><b>Selected items: 0 items</b></html>");

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jSplitPane2 = new javax.swing.JSplitPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        allNodesInViewJList = new javax.swing.JList();
        jScrollPane5 = new javax.swing.JScrollPane();
        allPrimInViewJList = new javax.swing.JList();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        allOtherPrimJList = new javax.swing.JList();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        selectedNodesJList = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        mainPanel.setPreferredSize(new java.awt.Dimension(800, 575));

        jButton2.setText("OK");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("Cancel");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel1.setText("Create a new graph view from the selected nodes?");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(28, 28, 28)
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 173, Short.MAX_VALUE)
                .add(jButton2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton4)
                .add(47, 47, 47))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jButton4)
                    .add(jButton2))
                .addContainerGap())
        );

        jLabel2.setText("Please select nodes from the left and press >> button to move it to the right");

        jLabel3.setText("If you do not need some nodes on the right pane, select them and then press << button to move them back");

        jLabel4.setText("When you finish node selection, press the OK button, or else press the cancel button.");

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel2)
                    .add(jLabel4)
                    .add(jLabel3))
                .addContainerGap(57, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel4)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane1.setBorder(null);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setResizeWeight(0.7);

        jSplitPane2.setBorder(null);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane2.setResizeWeight(0.5);

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jTextArea3.setBorder(null);
        jScrollPane3.setViewportView(jTextArea3);

        jSplitPane2.setRightComponent(jScrollPane3);

        allNodesInViewJList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "<html><b>All nodes in the current view</b></html>" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(allNodesInViewJList);

        jSplitPane2.setLeftComponent(jScrollPane2);

        allPrimInViewJList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "<html><b>All primitive entities</b></html>" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane5.setViewportView(allPrimInViewJList);

        jSplitPane2.setBottomComponent(jScrollPane5);

        jSplitPane1.setLeftComponent(jSplitPane2);

        jTextArea4.setColumns(20);
        jTextArea4.setRows(5);
        jTextArea4.setBorder(null);
        jScrollPane4.setViewportView(jTextArea4);

        jSplitPane1.setRightComponent(jScrollPane4);

        allOtherPrimJList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "<html><b>All primitive entities in the current view</b></html>" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        allOtherPrimJList.setName(""); // NOI18N
        jScrollPane6.setViewportView(allOtherPrimJList);

        jSplitPane1.setBottomComponent(jScrollPane6);

        jButton1.setText(">>");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("<<");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jButton3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 46, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 46, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(141, 141, 141)
                .add(jButton1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(18, 18, 18)
                .add(jButton3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(144, 144, 144))
        );

        jScrollPane1.setViewportView(selectedNodesJList);

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4Layout.createSequentialGroup()
                .add(20, 20, 20)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout mainPanelLayout = new org.jdesktop.layout.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(mainPanelLayout.createSequentialGroup()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(29, 29, 29))
            .add(mainPanelLayout.createSequentialGroup()
                .add(9, 9, 9)
                .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(7, 7, 7))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, mainPanelLayout.createSequentialGroup()
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 797, Short.MAX_VALUE)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                    .addContainerGap()
                    .add(mainPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 757, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 615, Short.MAX_VALUE)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .addContainerGap()
                    .add(mainPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.setVisible(false);
}//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        
        int selectedIndArr[];
        int start = 0;

        /* process all nodes JList */
        selectedIndArr = allNodesInViewJList.getSelectedIndices();
        System.out.println("selectedIndArr size "+selectedIndArr.length);
        Set entitiesInMetanodesOfThisViewSet = new HashSet();
        if (selectedIndArr.length > 0) {
            start = 0;
            System.out.println("selectedIndArr[0] " + selectedIndArr[0]);
            if (selectedIndArr[0] == 0) {
                start = 1;
            }

            for (int i = start; i < selectedIndArr.length; i++) {
                System.out.println("selectedIndArr[i] " + selectedIndArr[i]);
                Object item = allNodesInViewLM.elementAt(selectedIndArr[i] - (i - start));

                System.out.println("item " + item);
                selectedNodesLM.addElement(item);
                allNodesInViewSet.remove(item);
                allNodesInViewLM.removeElementAt(selectedIndArr[i] - (i - start));
                
            }
            allNodesInViewJList.clearSelection();
            System.out.println("size of all node inview set "+allNodesInViewSet.size());
            allNodesInViewLM.set(0, "<html><b>All nodes in the current view: "+(allNodesInViewLM.size()-1)+" nodes</b></html>");
        }

        
        for (Object member : selectedNodesLM.toArray()){
            if (member instanceof Set)
                entitiesInMetanodesOfThisViewSet.addAll((Set)member);
        }
        /* process entities in metanode JList */
        int skip = 0;
        selectedIndArr = allPrimInViewJList.getSelectedIndices();
//        System.out.println("selectedIndArr size "+selectedIndArr.length);
        if (selectedIndArr.length > 0) {
            start = 0;
//            System.out.println("selectedIndArr[0] " + selectedIndArr[0]);
            if (selectedIndArr[0] == 0) {
                start = 1;
            }

            for (int i = start; i < selectedIndArr.length; i++) {
//                System.out.println("selectedIndArr[i] " + selectedIndArr[i]);
//                System.out.println("element at " + allPrimEntInViewLM.elementAt(selectedIndArr[i] - (i - start) + skip));
                if (entitiesInMetanodesOfThisViewSet.contains(allPrimEntInViewLM.elementAt(selectedIndArr[i] - (i - start)+skip)))
                {
                    skip++;

                } else {

                    selectedNodesLM.addElement(allPrimEntInViewLM.elementAt(selectedIndArr[i] - (i - start) + skip));
                    primEntInViewSet.remove(allPrimEntInViewLM.elementAt(selectedIndArr[i] - (i - start) + skip));
                    allPrimEntInViewLM.removeElementAt(selectedIndArr[i] - (i - start) + skip);
                    
                }
            }
            allPrimInViewJList.clearSelection();
            allPrimEntInViewLM.set(0,"<html><b>Primitive entities in metanodes of above list: "+(allPrimEntInViewLM.size()-1)+" entities</b></html>");

        }


        /* process all entities jList */

        selectedIndArr = allOtherPrimJList.getSelectedIndices();
        start = 0;
        if (selectedIndArr.length > 0) {
//        System.out.println("selectedIndArr[0] "+selectedIndArr[0]);
            if (selectedIndArr[0] == 0) {
                start = 1;
            }

            for (int i = start; i < selectedIndArr.length; i++) {
//            System.out.println("selectedIndArr[i] "+selectedIndArr[i]);

//            System.out.println("element at "+allPrimEntLM.elementAt(selectedIndArr[i]-(i-start)));
                selectedNodesLM.addElement(allPrimEntLM.elementAt(selectedIndArr[i] - (i - start)));
                allPrimEntSet.remove(allPrimEntLM.elementAt(selectedIndArr[i] - (i - start)));
                allPrimEntLM.removeElementAt(selectedIndArr[i] - (i - start));
                
            }

            allOtherPrimJList.clearSelection();
            allPrimEntLM.set(0,"<html><b>All other primitive entities: "+(allPrimEntLM.size()-1)+" entities</b></html>");
        }
        selectedNodesLM.set(0,"<html><b>Selected items: "+(selectedNodesLM.size()-1)+" items</b></html>");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        int selectedIndArr[];
        int start = 0;
        selectedIndArr = selectedNodesJList.getSelectedIndices();
        start = 0;
        if (selectedIndArr.length > 0) {
//        System.out.println("selectedIndArr[0] "+selectedIndArr[0]);
            if (selectedIndArr[0] == 0) {
                start = 1;
            }

            for (int i = start; i < selectedIndArr.length; i++) {
                Object item =  selectedNodesLM.elementAt(selectedIndArr[i] - (i - start));
                if (dynamicGraph.containsVertex(item))
                {
                    System.out.println("contain "+item);
                    allNodesInViewSet.add(item);
                } else if (primEntInViewSetCopy.contains(item)) {
                    primEntInViewSet.add(item);
                } else
                {
                    allPrimEntSet.add(item);
                }
//            System.out.println("selectedIndArr[i] "+selectedIndArr[i]);

//            System.out.println("element at "+allPrimEntLM.elementAt(selectedIndArr[i]-(i-start)));
//                selectedNodesLM.addElement(allPrimEntLM.elementAt(selectedIndArr[i] - (i - start)));
                selectedNodesLM.removeElementAt(selectedIndArr[i] - (i - start));
            }

            selectedNodesJList.clearSelection();
            selectedNodesLM.set(0,"<html><b>Selected items: "+(selectedNodesLM.size()-1)+" items</b></html>");

            if (allNodesInViewLM.size() > 1)
                allNodesInViewLM.removeRange(1, allNodesInViewLM.getSize() - 1);
            for (Object ver : allNodesInViewSet) {
                allNodesInViewLM.addElement(ver);
            }
            System.out.println("size all node in view set: "+allNodesInViewSet.size());
            System.out.println("size all node in view LM: "+(allNodesInViewLM.size()-1));
            allNodesInViewLM.set(0, "<html><b>All nodes in the current view: " + (allNodesInViewSet.size()) + " nodes</b></html>");

            if (allPrimEntInViewLM.size() > 1)
                allPrimEntInViewLM.removeRange(1, allPrimEntInViewLM.getSize() - 1);
            for (Object ver : primEntInViewSet) {
                allPrimEntInViewLM.addElement(ver);
            }
            allPrimEntInViewLM.set(0, "<html><b>Primitive entities in metanodes of above list: " + (primEntInViewSet.size()) + " entities</b></html>");

            if (allPrimEntLM.size() > 1)
                allPrimEntLM.removeRange(1, allPrimEntLM.getSize() - 1);
            for (Object ver : allPrimEntSet) {
                allPrimEntLM.addElement(ver);
            }
            allPrimEntLM.set(0, "<html><b>All other primitive entities: " + (allPrimEntSet.size()) + " entities</b></html>");

        }


    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        answerOK = true;
        this.setVisible(false);
        selectedNodesLM.remove(0);
        selectedNodeSet = new HashSet(Arrays.asList(selectedNodesLM.toArray()));
    }//GEN-LAST:event_jButton2ActionPerformed

    public boolean isAnswerOK(){
        return answerOK;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                CreateGraphFromNodeSetDialog dialog = new CreateGraphFromNodeSetDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList allNodesInViewJList;
    private javax.swing.JList allOtherPrimJList;
    private javax.swing.JList allPrimInViewJList;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JList selectedNodesJList;
    // End of variables declaration//GEN-END:variables
    private Graph dynamicGraph;
    private Graph realGraph;
    private DefaultListModel allPrimEntLM;
    private DefaultListModel allNodesInViewLM;
    private DefaultListModel allPrimEntInViewLM;
    private DefaultListModel selectedNodesLM = new DefaultListModel();
    private Set primEntInViewSet = new TreeSet(new BioObjectComparator());
    private Set primEntSetToBeRemoved = new TreeSet(new BioObjectComparator());
    private Set primEntInViewSetCopy = new TreeSet(new BioObjectComparator());
    
    private Set allNodesInViewSet = new TreeSet(new Comparator(){

            public int compare(Object o1, Object o2) {
                if (o1 instanceof BioObject && o2 instanceof BioObject){
                    return o1.toString().compareToIgnoreCase(o2.toString());
                } else if (o1 instanceof Set && o2 instanceof Set)
                {
                    if (((Set)o1).size() < ((Set)o2).size())
                        return -1;
                    else if (((Set)o1).size() > ((Set)o2).size())
                        return 1;
                    else {
                        if (((Set)o1).size() == 0)
                            return 0;
                        return ((Set)o1).iterator().next().toString().compareToIgnoreCase(((Set)o2).iterator().next().toString());
//                        return 0;
                    }
                        
                } else {
                    if ((o1 instanceof BioObject) && (o2 instanceof Set))
                        return -1;
                    else if ((o1 instanceof Set) && (o2 instanceof BioObject))
                        return 1;
                    else
                        return 0;
                }

            }
        });
    private Set allPrimEntSet = new TreeSet(new BioObjectComparator());
    private boolean answerOK = false;
    private Set selectedNodeSet = new HashSet();

    public Set getSelectedNodeSet() {
        return selectedNodeSet;
    }


}
